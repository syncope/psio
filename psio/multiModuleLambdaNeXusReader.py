# Copyright (C) 2020  Christoph Rosemann, DESY, Notkestr. 85, D-22607 Hamburg
# email contact: christoph.rosemann@desy.de
#
# psio :: photon science input ouput is a library to facilitate the 
# access to file based data by offering unified services to different
# data formats
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation in  version 2
# of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA  02110-1301, USA.


from . import lambdaNeXusReader
from . import multiModuleObject


class MultiModuleLambdaNeXusReader():
    '''The master object to handle multi module data files from a lambda detector.
       The paths are predefined, from the de-facto standard. 
       The unique ID to identify and synchronise the individual images from
       the modules is called the 'sequence number', generated by the DAQ.'''

    def __init__(self, detectorpath='/entry/instrument/detector'):
        '''The constructor.'''
        self._detectorpath = detectorpath
        self._errorname = 'collection/error_code'
        self._pixelmaskname = 'pixel_mask'
        self._pixalmaskappliedname = 'pixel_mask_applied'
        self._flatfieldname = 'flatfield'
        self._flatfieldappliedname = 'flatfield_applied'
        self._sequencenumbername = 'sequence_number'
        self._modules = None

    def initialize(self, files=[]):
        for f in files:
            # get from each file: 
            # + module id
            # + error array
            # + sequence number
        # data structure: 


    def numberOfFrames(self):
        pass

    def getFrame(self, index):
        pass

